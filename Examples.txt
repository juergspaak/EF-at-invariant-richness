Examples:
The examples are given for both cases, the functions from community_construction_coex
and community_construction_repl.

################################################
import community_construction_coex as  #alternativly import community_construction_repl, works as well

#generate communities
com_para = {}
# a gerneral community, facing any sort of environmental change
com_para['general'] = coex.rand_par() #a general community
#a community facing nutrient enrichment, i.e. e<0
com_para['enrich'] = coex.rand_par(ave_max=0, e_max =0)
#a community facing toxic stress, i.e. e>0
com_para['tox'] = coex.rand_par(ave_min=0, e_min =0)
# a community facing temperature changes, most species will suffer, but some might provit
com_para['temp'] = coex.rand_par(ave_min=-0.2, e_min =-0.3)

#compute deltaEF/EF, linear functioning
delta_EF = {key:coex.delta_EF_lin(*com_para[key]) \
		for key in com_para.keys()}

#compute deltaEF/EF, asymptotic functioning
asym_deltaEF = {key:coex.delta_EF_asym(*com_para[key]) \
		for key in com_para.keys()}

#compute deltaEF/EF, asymptotic functioning, with low halfsaturating constant
asym_deltaEF_lowH = {key:coex.delta_EF_asym(*com_para[key], max_ave_H = 0.2) \
		for key in com_para.keys()}
################################################
Note comparing these 3 dictionaries makes not that much sense, because the result is mainly
driven by a random process. Comparing these dictionaries makes only sense with a much larger
set of communities

Further examples can be found in the files:
How to construct communities: "parameters of communities.py"
You can also use the predefined communites in "coex, com_para.p" and "repl, com_para.p"

Use predefined comunities and compute theirs DeltaEF:
plot_fig2.py, plot_fig3.py

Use keyword adjust in repl.delta_EF_lin:
plot_figS3


