#Examples:
#The examples are given for both cases, the functions from community_construction_coex
#and community_construction_repl.

################################################

#Simple examples
from community_construction_coex import *
#alternativly
#from community_construction_repl import *

#generate communities
com_para = {}
# a gerneral community, facing any sort of environmental change
com_para['general'] = rand_par() #a general community
#a community facing nutrient enrichment, i.e. e<0
com_para['enrich'] = rand_par(ave_max=0, e_max =0)
#a community facing toxic stress, i.e. e>0
com_para['tox'] = rand_par(ave_min=0, e_min =0)
# a community facing temperature changes, most species will suffer, but some might provit
# we reduce the amount of species, to save some time
com_para['temp'] = rand_par(ave_min=-0.2, e_min =-0.3, num = 10000)

#compute deltaEF/EF, linear functioning
delta_EF = {key: delta_EF_lin(*com_para[key]) \
		for key in com_para.keys()}

#compute deltaEF/EF, asymptotic functioning
asym_deltaEF = {key: delta_EF_asym(*com_para[key]) \
		for key in com_para.keys()}

#compute deltaEF/EF, asymptotic functioning, with low halfsaturating constant
asym_deltaEF_lowH = {key:delta_EF_asym(*com_para[key], max_ave_H = 0.2) \
		for key in com_para.keys()}

#compare the effects on DeltaEF/EF of these communitis
import matplotlib.pyplot as plt
import numpy as np
for key in com_para.keys():
	x_point = np.linspace(0,100,len(delta_EF[key]))
	plt.plot(x_point,sorted(delta_EF[key]), label = key)
plt.legend(loc = "upper left")
plt.gca().set_ylabel(r'$100\cdot\Delta EF/EF_u$', fontsize=16)
plt.gca().set_xlabel('percentiles', fontsize=16)

#compare low halfsaturating constant with high saturating constant
plt.subplots(figsize = (9,9))
col = {'general':"red", 'enrich':"blue", 'tox':"green", 'temp':"orange"}
for key in com_para.keys():
	x_point = np.linspace(0,100,len(asym_deltaEF[key]))
	plt.plot(x_point,sorted(asym_deltaEF[key]), 
			color = col[key],label = key)
	plt.plot(x_point,sorted(asym_deltaEF_lowH[key]),':', 
				color = col[key],label = key+"low H")
plt.axis([0,100,-100,100])
plt.legend(loc = "upper left")
plt.gca().set_ylabel(r'$100\cdot\Delta EF/EF_u$', fontsize=16)
plt.gca().set_xlabel('percentiles', fontsize=16)

#Example only for changing community structure:
import community_construction_repl as repl
#generate a community where 95% of the species survive the environmental change
com_par_p95 = repl.rand_par(p = 0.95, num = 1000)
################################################

"""
Further examples can be found in the files:
How to construct communities: "parameters of communities.py"

Use predefined comunities and compute theirs DeltaEF:
plot_fig2.py, plot_fig3.py

Use asymptotic functioning:
plot_figS4.py

Use keyword sim_f in repl.delta_EF_lin:
plot_figS5"""


